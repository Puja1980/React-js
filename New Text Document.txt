import React, { useState, useEffect } from 'react';
import './style.css';
import useTextToSpeech from './useTextToSpeech';

export default function App() {
  const [text, setText] = useState("Don't Forget to Subscribe");
  const [voice, setVoice] = useState(null);
  const { voices, speak, pause, resume, cancel } = useTextToSpeech();

  useEffect(() => {
    setVoice(voices[0]);
  }, [voices]);

  const onClick = () => speak({ text }, voice);

  const onVoiceChange = (e) => {
    setVoice(voices.find((v) => v.name === e.target.value));
  };

  const onTextChange = (e) => {
    setText(e.target.value);
  };

  return (
    <main>
      <h1>Text To Audio</h1>
      <textarea rows="8" cols="72" value={text} onChange={onTextChange} />
      <select value={voice?.name} onChange={onVoiceChange}>
        <option value={null}>Select Voice</option>
        {voices.map((voice) => (
          <option key={voice.name} value={voice.name}>
            {voice.name}
          </option>
        ))}
      </select>
      <section>
        <button onClick={onClick}>Start</button>
        <button onClick={pause}>Pause</button>
        <button onClick={resume}>Resume</button>
        <button onClick={cancel}>Cancel</button>
      </section>
    </main>
  );
}

//=======================================================
	custom Hook
---------------------------------------
import { useState, useEffect } from 'react';

const synth = window.speechSynthesis;

const speak = (state, voice) => {
  const utterance = new SpeechSynthesisUtterance();
  utterance.voice = voice;
  utterance.text = state.text;
  synth.speak(utterance);
  // utterance.rate = state.rate;
  // utterance.onend = resolve;
};

const useTextToSpeech = () => {
  const [voices, setVoices] = useState([]);

  useEffect(() => {
    const list = synth.getVoices();
    setVoices(list);
  }, []);

  return {
    voices,
    speak: speak,
    pause: () => synth.pause(),
    resume: () => synth.resume(),
    cancel: () => synth.cancel(),
  };
};

export default useTextToSpeech;

